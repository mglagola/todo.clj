exit
(def user {:user "blah" :name "mark" :id 12345})
user
(defn cool [] "cools")
(assoc user :name (cool))
(defn create-user-and-encrypt-pass
  "Creates a user and also encrypts password"
  [{pass :password :as user-spec}]
(str pass ":" user-spec))
(defn create-user-and-encrypt-pass
  [{pass :password :as user-spec}]
(create-user-and-encrypt-pass {:password "hey" :bossmna "fdjaksf
(create-user-and-encrypt-pass {:password "hey" :bossmna "fdjaksf" :hey 1232})
exit
(if-let [x true] true false)
(if-let [x false] true false)
(if-let [x nil] true false)
(def test '(1 2 3))
(def bob '(1 2 3))
bob
(peek bob)
(pop bob)
(read-string "fjdklsa")
"fdasf")
"fdasf"
(Integer/parseInt "532")
(Integer/parseInt "532fdjsakl")
(try (Integer/parseInt "532fdjsakl")
"Integer"
(catch Exception ex
"Non Integer"))
(try (Integer/parseInt "321") "Integer" (catch Exception ex "Non Integer"))
